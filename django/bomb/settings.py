"""
Django settings for bomb project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
import datetime

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6+-9pf!440r8m)vw58g$$+655u1m_9=)^g$&$)t%wfca8nsqvb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_celery_beat',
    'django_celery_results',
    'django_gitlab_auth',
    'guardian',
    'k8s',
    'account',
    'toolkit',
    'deploy',
    'audit',
    'user_profile'
]

LOGIN_REDIRECT_URL = '/'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bomb.urls'

CORS_ORIGIN_ALLOW_ALL = True

# drf框架的配置信息
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'common.exception_handler.custom_exception_handler',

    # 用户登陆认证方式
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),

    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
        'rest_framework.permissions.IsAuthenticated'
    ],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
}


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # default
    'guardian.backends.ObjectPermissionBackend',
)


# jwt载荷中的有效期设置
JWT_AUTH = {
    'JWT_AUTH_COOKIE': 'token',  # 使用cookie 中的token来获取jwt token
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),  # 有效期设置
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'rest_framework_jwt.utils.jwt_response_payload_handler',
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bomb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_DB') or 'bomb',
        'USER': os.environ.get('DATABASE_USER') or 'bomb',
        'PASSWORD': os.environ.get('DATABASE_PASSWORD') or '123456',
        'HOST': os.environ.get('DATABASE_HOST') or '127.0.0.1',
        'PORT': os.environ.get('DATABASE_PORT') or '5432',
    }

}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'

# celery settings
CELERY_BROKER_URL = os.environ.get(
    'CELERY_REDIS_URL') or 'redis://127.0.0.1:6379/0'  # Broker配置，使用Redis作为消息中间件
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_TIMEZONE = "Asia/Shanghai"
CELERY_RESULT_EXPIRES = 0

# Gitlab oauth2 配置需要设置在环境变量中方可使用（highlight）
GITLAB_CLIENT_SECRET = os.environ.get("GITLAB_CLIENT_SECRET")
GITLAB_CLIENT_ID = os.environ.get("GITLAB_CLIENT_ID")
GITLAB_SERVER = os.environ.get('GITLAB_SERVER')
# 登陆成功后的跳转地址，需要注意域名一致，防止token无法设置不能登陆
GITLAB_OAUTH_REDIRECT = "https://xx.xiemx.com" or 'http://localhost:8080'
# 使用gitlab oauth登陆后如有用户未开放email 时使用此配置处理email信息，email domain xxx@<xxxxx.com>
EMAIL_SUFFIX = 'xiemx.com'

# gitlab access key
GITLAB_ACCESS_KEY = os.environ.get("GITLAB_ACCESS_KEY")

# toolkit exam
EXAM_PROJECT_ID = os.environ.get('EXAM_PROJECT_ID') or 83
EXAM_TRIGGER_TOKEN = os.environ.get('EXAM_TRIGGER_TOKEN')
EXAM_TRIGGER_REF = os.environ.get('EXAM_TRIGGER_REF') or 'master'
EXAM_JOB_NAME = os.environ.get('EXAM_JOB_NAME') or 'run-script'

# toolkit ingress whitelist
INGRESS_PROJECT_ID = os.environ.get('INGRESS_PROJECT_ID') or 60
INGRESS_TRIGGER_TOKEN = os.environ.get('INGRESS_TRIGGER_TOKEN')
INGRESS_TRIGGER_REF = os.environ.get('INGRESS_TRIGGER_REF') or 'master'
INGRESS_JOB_NAME = os.environ.get('INGRESS_JOB_NAME') or 'ingress_whitelist'

# toolkit graphite cleaner
GRAPHITE_PROJECT_ID = os.environ.get('GRAPHITE_PROJECT_ID') or 60
GRAPHITE_TRIGGER_TOKEN = os.environ.get('INGRESS_TRIGGER_TOKEN')
GRAPHITE_TRIGGER_REF = os.environ.get('GRAPHITE_TRIGGER_REF') or 'master'

# toolkit autoscaling service
SERVICES_MAP = {

    # debug
    "debug": {"project_id": 74, "trigger_token": os.environ.get('K8S_TRIGGER_TOKEN'), "ref": "master"},

    # repo: judger-autoscaling
    "weekly-judger": {"project_id": 67,  "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},
    "biweekly-judger": {"project_id": 67,  "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},
    "judger-ee-huawei": {"project_id": 67, "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},
    "judger-ee-popular": {"project_id": 67, "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},
    "judger-ee-icpc": {"project_id": 67, "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},
    "judger-ee-debugger": {"project_id": 67, "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},
    "judger-huawei-debugger": {"project_id": 67, "trigger_token": os.environ.get('JUDGER_TRIGGER_TOKEN'), "ref": "master"},

    # repo: k8s_node_autoscaling
    "noj": {"project_id": 74,  "trigger_token": os.environ.get('K8S_TRIGGER_TOKEN'), "ref": "master"},
    "lsp": {"project_id": 74,  "trigger_token": os.environ.get('K8S_TRIGGER_TOKEN'), "ref": "master"},
    "bw_noj": {"project_id": 74, "trigger_token": os.environ.get('K8S_TRIGGER_TOKEN'), "ref": "master"},

}

# 消息通知 钉钉配置
DING_SIGN_SECRET = os.environ.get('DING_SIGN_SECRET')
DING_ACCESS_TOKEN = os.environ.get('DING_ACCESS_TOKEN')

# aliyun
ALICLOUD_SECRET_KEY = os.environ.get('ALICLOUD_SECRET_KEY')
ALICLOUD_ACCESS_KEY = os.environ.get('ALICLOUD_ACCESS_KEY')
ALICLOUD_REGION = os.environ.get('ALICLOUD_REGION') or 'cn-hangzhou'
